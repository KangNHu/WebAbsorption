package com.liveeeasy.web.absorption.demo.spider.wuba;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.liveeasy.web.absorption.core.annotation.SPI;import com.liveeasy.web.absorption.core.pipeline.SimpleWebAbsorptionPipeline;import com.liveeasy.web.absorption.core.schehule.ByteData;import org.apache.commons.lang3.StringUtils;import us.codecraft.webmagic.ResultItems;import us.codecraft.webmagic.Task;import java.io.*;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@SPI("wuBaSpider")public class WuBaDataStreamPipeline extends SimpleWebAbsorptionPipeline{    private String rootPath;    public void setRootPath(String rootPath){        this.rootPath =rootPath;    }    @Override    public int getType() {        return DATA_STREAM_PIPELINE;    }    public void streamPipeline(ByteData byteData) throws IOException {        FileOutputStream fileOutputStream = null;        try{            URL url = byteData.getUrl();            DataInputStream dataInputStream = byteData.getDataInputStream();            String path = StringUtils.substringBeforeLast(url.getPath(), "/");                File file = new File(rootPath + path);                if (!file.exists()) {                    file.mkdirs();                }                FileOutputStream outputStream = new FileOutputStream(rootPath + url.getPath());                byte[] buff = new byte[1024];                int length = 0;                while ((length = dataInputStream.read(buff)) > 0) {                    outputStream.write(buff, 0, length);                }        }finally {            if(fileOutputStream != null){                fileOutputStream.close();            }            byteData.close();        }    }    @Override    public List<String> getDataStreamUrl(ResultItems resultItems, Task task) {        Map<String, Object> result = resultItems.getAll();        List<String> picUrls = new ArrayList<>();        if("data_pic".equals(result.get("type"))){            Object images = result.get("images");            JSONObject jsonObject = JSON.parseObject(images.toString());            JSONObject data = jsonObject.getJSONObject("data");            picUrls.addAll(getPicUrls(data , "huxingtu"));            picUrls.addAll(getPicUrls(data , "shijingtu"));        }        return picUrls;    }    private List<String> getPicUrls(JSONObject data , String type){        JSONArray jsonArray = data.getJSONArray("huxingtu");        return  jsonArray != null ? jsonArray.stream().map(item -> ((JSONObject) item).getString("picurl")).collect(Collectors.toList()) : new ArrayList<String>();    }}