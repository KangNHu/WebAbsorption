package com.liveeasy.web.absorption.core.schehule;import com.alibaba.fastjson.JSON;import org.springframework.data.redis.core.RedisTemplate;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import us.codecraft.webmagic.ResultItems;import us.codecraft.webmagic.selector.Json;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;public class RedisDataResultItemsSchedule extends AbstractDataResultItemsSchedule implements DuplicateRemover<ResultItems> {    private static final String  RESULT_ITEMS = "result_items_";    private static final String  SET_RESULT_ITEMS = "set_result_items_";    private RedisTemplate<String , String> redisTemplate;    public RedisDataResultItemsSchedule(RedisTemplate redisTemplate){        super();        this.redisTemplate = redisTemplate;    }    public RedisTemplate getRedisTemplate() {        return redisTemplate;    }    @Override    protected ResultItems getResultItems() {        ResultItems resultItems = null;            String json = redisTemplate.opsForList().leftPop(getResultItemsKey());            if(null != json) {                resultItems = JSON.parseObject(json, ResultItems.class);                resultItems = !isDuplicate(resultItems) ? resultItems : null;            }        return resultItems;    }    @Override    public void addElement(ResultItems element) {        redisTemplate.opsForList().leftPush(getResultItemsKey() , JSON.toJSONString(element));    }    @Override    public void redoQueueAll(List<ResultItems> elements) {        String[] removeElements = new String[elements.size()];        List<String> redoElements = new ArrayList<>();        for (int i = 0 , length = elements.size() ; i < length ; i++){            removeElements[i] = JSON.toJSONString(elements.get(i).getAll());            redoElements.add(JSON.toJSONString(elements.get(i)));        }        redisTemplate.opsForSet().remove(getSetResultItemsKey() , removeElements);        redisTemplate.opsForList().rightPushAll(getResultItemsKey() , redoElements);    }    @Override    public boolean isDuplicate(ResultItems resultItems) {            return redisTemplate.opsForSet().add(getSetResultItemsKey() , JSON.toJSONString(resultItems.getAll())) == 0;    }    @Override    public void resetDuplicateCheck() {            redisTemplate.delete(getSetResultItemsKey());    }    @Override    public void redoQueue(ResultItems element) {    }    public String getSetResultItemsKey(){        return SET_RESULT_ITEMS + task.getUUID();    }    public String getResultItemsKey(){        return RESULT_ITEMS + task.getUUID();    }}