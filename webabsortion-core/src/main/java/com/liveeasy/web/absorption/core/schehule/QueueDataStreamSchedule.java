package com.liveeasy.web.absorption.core.schehule;import com.liveeasy.web.absorption.core.pipeline.WebAbsorptionPipeline;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import us.codecraft.webmagic.Task;import java.io.DataInputStream;import java.io.IOException;import java.net.URL;import java.util.Collection;import java.util.Iterator;import java.util.List;import java.util.concurrent.BlockingQueue;import java.util.concurrent.LinkedBlockingQueue;public class QueueDataStreamSchedule extends AbstractDataStreamSchedule {    private BlockingQueue<String> blockingQueue = new LinkedBlockingQueue();    public QueueDataStreamSchedule(){        super();    }    public BlockingQueue<String> getBlockingQueue() {        return blockingQueue;    }    @Override    protected String getDataStreamUrl() {        String dataStreamUrl = blockingQueue.poll();        return dataStreamUrl;    }    @Override    public void addElement(String url) {        if(null != url) {            blockingQueue.add(url);        }    }    @Override    public void addElements(Collection<String> urls) {        if(null != urls){            for (Iterator<String> iterator = urls.iterator() ; iterator.hasNext() ;){                String url = iterator.next();                if(null != url) {                    blockingQueue.add(url);                }            }        }    }}