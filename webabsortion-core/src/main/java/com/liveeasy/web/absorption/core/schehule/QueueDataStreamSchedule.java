package com.liveeasy.web.absorption.core.schehule;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.DataInputStream;import java.io.IOException;import java.net.URL;import java.util.Collection;import java.util.Iterator;import java.util.concurrent.BlockingQueue;import java.util.concurrent.LinkedBlockingDeque;import java.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;public class QueueDataStreamSchedule extends AbstractDataStreamSchedule{    private Logger logger = LoggerFactory.getLogger(QueueDataStreamSchedule.class);    private BlockingQueue<String> blockingQueue = new LinkedBlockingQueue();    public QueueDataStreamSchedule(){        super();    }    @Override    protected void execute() {        DataInputStream inputStream = null;        String dataStreamUrl = blockingQueue.poll();        try {            URL url = new URL(dataStreamUrl);            inputStream = new DataInputStream(url.openStream());            dataStreamPipeline.streamPipeline(inputStream);        }catch (Exception e){            logger.error("下载图片{}失败", dataStreamUrl, e);             blockingQueue.add(dataStreamUrl);        } finally {            if (null != inputStream) {                try {                    inputStream.close();                } catch (IOException e) {                    logger.error("关闭流失败", e);                }            }        }    }    @Override    public void addDataStreamUrl(String suffix, String url) {        if(null != url) {            blockingQueue.add(url);        }    }    @Override    public void addDataStreamUrl(String suffix, Collection<String> urls) {        if(null != urls){            for (Iterator<String> iterator = urls.iterator() ; iterator.hasNext() ;){                String url = iterator.next();                if(null != url) {                    blockingQueue.add(url);                }            }        }    }}