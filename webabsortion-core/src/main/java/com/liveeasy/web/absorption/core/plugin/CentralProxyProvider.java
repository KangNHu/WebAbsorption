package com.liveeasy.web.absorption.core.plugin;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import us.codecraft.webmagic.Page;import us.codecraft.webmagic.Task;import us.codecraft.webmagic.proxy.Proxy;import us.codecraft.webmagic.proxy.ProxyProvider;import java.io.IOException;import java.net.InetSocketAddress;import java.net.Socket;public   class AbstractProxyProvider implements ProxyProvider {    private static Logger logger = LoggerFactory.getLogger(AbstractProxyProvider.class);    protected boolean isAvailability(Proxy proxy , int timeout){        Socket socket = new Socket();        try {            socket.connect(new InetSocketAddress(proxy.getHost(), proxy.getPort()) , timeout);        } catch (IOException e) {            if(logger.isDebugEnabled()){                logger.debug("{}:{} not  availability" , proxy.getHost() , proxy.getPort());            }            return false;        } finally {            try {                socket.close();            } catch (IOException e) {                logger.error("socket close error :" , e);            }        }        return true;    }    @Override    public void returnProxy(Proxy proxy, Page page, Task task) {    }    @Override    public Proxy getProxy(Task task) {        return null;    }}