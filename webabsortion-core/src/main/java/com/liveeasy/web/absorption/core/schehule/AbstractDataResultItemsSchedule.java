package com.liveeasy.web.absorption.core.schehule;import com.liveeasy.web.absorption.core.pipeline.DataStreamPipeline;import com.liveeasy.web.absorption.core.pipeline.WebAbsorptionPipeline;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import us.codecraft.webmagic.ResultItems;import us.codecraft.webmagic.Task;import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;import java.util.List;public abstract class AbstractDataResultItemsSchedule extends AbstractDataSchedule<ResultItems>{    private static Logger logger = LoggerFactory.getLogger(AbstractDataResultItemsSchedule.class);    protected List<WebAbsorptionPipeline> webAbsorptionPipelines;    public AbstractDataResultItemsSchedule(){        super();    }    private int batchSize = 1;    public void setBatchSize(int batchSize){        this.batchSize = batchSize;    }    @Override    protected void execute() {        ResultItems resultItems = null;        List<ResultItems> list = new ArrayList<>();        do {            resultItems = getResultItems();            if(resultItems == null){                break;            }            list.add(resultItems);        }while (list.size() <= batchSize);        if(null != resultItems) {            try {                for (int i = 0 , length = webAbsorptionPipelines.size() ; i < length ; i++) {                        webAbsorptionPipelines.get(i).lastPipeline(resultItems, task);                        webAbsorptionPipelines.get(i).pipeline(list , task);                }            } catch (Exception e) {                logger.error("管道数据处理错误" , e);                downloaderPlugin.dataPersistenceError(list, this);            }        }    }    protected abstract ResultItems getResultItems();    @Override    public void setWebAbsorptionPipelines(List<WebAbsorptionPipeline> webAbsorptionPipelines) {        this.webAbsorptionPipelines = webAbsorptionPipelines;    }    @Override    public List<WebAbsorptionPipeline> getWebAbsorptionPipelines() {        return webAbsorptionPipelines;    }    @Override    public void setDataStreamPipeline(DataStreamPipeline dataStreamPipeline) {    }    @Override    public DataStreamPipeline getDataStreamPipeline() {        return null;    }    @Override    public void addElements(List<ResultItems> elements) {        if(null != elements ){            for (int i = 0 , length = elements.size() ; i < length ; i++){                addElement(elements.get(i));            }        }    }}