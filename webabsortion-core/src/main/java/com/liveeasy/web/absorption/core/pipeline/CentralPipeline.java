package com.liveeasy.web.absorption.core.pipeline;import com.liveeasy.web.absorption.core.factory.Product;import com.liveeasy.web.absorption.core.schehule.AbstractDataStreamSchedule;import com.liveeasy.web.absorption.core.schehule.DataStreamSchedule;import com.liveeasy.web.absorption.core.schehule.QueueDataStreamSchedule;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import us.codecraft.webmagic.ResultItems;import us.codecraft.webmagic.Task;import us.codecraft.webmagic.pipeline.Pipeline;import java.util.Iterator;import java.util.List;public  class CentralPipeline implements Pipeline , Product {    private Logger logger = LoggerFactory.getLogger(CentralPipeline.class);    private List<WebAbsorptionPipeline> webAbsorptionPipelines;    private DataStreamSchedule dataStreamSchedule;    public CentralPipeline setDataStreamSchedule(DataStreamSchedule dataStreamSchedule){        this.dataStreamSchedule = dataStreamSchedule;        return this;    }    public CentralPipeline setWebAbsorptionPipeline(List<WebAbsorptionPipeline> webAbsorptionPipelines){        this.webAbsorptionPipelines = webAbsorptionPipelines;        return this;    }    @Override    public void process(ResultItems resultItems, Task task) {        DataStreamPipeline dataStreamPipeline = dataStreamSchedule.getDataStreamPipeline();        if(null != dataStreamPipeline){            List<String> dataStreamUrls = dataStreamPipeline.getDataStreamUrl(resultItems, task);            dataStreamSchedule.addDataStreamUrl(task.getUUID() , dataStreamUrls);        }        for (Iterator<WebAbsorptionPipeline> iterator = webAbsorptionPipelines.iterator() ; iterator.hasNext() ;){            WebAbsorptionPipeline webAbsorptionPipeline = iterator.next();            if(null != webAbsorptionPipeline){                webAbsorptionPipeline.pipeline(resultItems , task);            }        }    }    @Override    public Product createClone() {        try {            return (Product) super.clone();        } catch (CloneNotSupportedException e) {            logger.error("createClone :" , e);        }        return null;    }}