package tech.liveeasy.spider.webmagic.extended;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.InitializingBean;import org.springframework.stereotype.Component;import tech.liveeasy.spider.webmagic.common.Lifecycle;import tech.liveeasy.spider.webmagic.common.thread.FileListener;import tech.liveeasy.spider.webmagic.common.thread.RegisterFileListener;import java.io.*;import java.util.ArrayList;import java.util.List;import java.util.Random;import java.util.concurrent.locks.ReentrantReadWriteLock;@Componentpublic class UserAgent  implements FileListener,  InitializingBean ,Lifecycle {    private Logger logger = LoggerFactory.getLogger(UserAgent.class);    private static final String AGENT_FILE_PATH= "user-agent/User-Agents.txt";    private List<String> agents;    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    @Override    public void afterPropertiesSet() throws Exception {        initialize();        RegisterFileListener registerFileListener = new RegisterFileListener(UserAgent.class.getClassLoader().getResource(AGENT_FILE_PATH).getPath());        registerFileListener.register(this);        registerFileListener.start();    }    /**     * 随机获取agent     * @param agent     * @return     */    public String getRandom(String agent){        try {            lock.readLock().lock();            int size = agents.size();            if (size == 0) {                return null;            }            Random random = new Random();            int oldIndex = -2;            if(null != agent){                oldIndex = agents.indexOf(agent);            }            int newIndex = 0;            do {                newIndex = random.nextInt(size);            } while (newIndex == oldIndex);            return agents.get(newIndex);        }finally {            lock.readLock().unlock();        }    }    public String getRandom(){        return getRandom(null);    }    @Override    public void onFileChange(File file) {        if(file.canRead()){            try {                lock.writeLock().lock();                initialize();                logger.info("重新加载User-Agent资源");            }finally {                lock.writeLock().unlock();            }        }    }    @Override    public void executeError(Exception e) {        logger.error("executeError" , e);    }    @Override    public void destroy() {    }    @Override    public void initialize() {        agents = new ArrayList<>();        InputStream resourceAsStream = null;        InputStreamReader inputStreamReader = null;        BufferedReader bufferedReader = null;        try {            resourceAsStream = UserAgent.class.getClassLoader().getResourceAsStream(AGENT_FILE_PATH);            inputStreamReader = new InputStreamReader(resourceAsStream);            bufferedReader = new BufferedReader(inputStreamReader);            String len = null;            while ((len = bufferedReader.readLine()) != null){                if(!len.matches("^#.*")){                    agents.add(len.trim());                }            }            logger.info("user-agent file Loaded successfully");        }catch (Exception e){            logger.error("Failed to load user-agent file" , e);        }finally {            if(null != bufferedReader){                try {                    bufferedReader.close();                } catch (IOException e) {                    logger.error("Failed to close bufferedReader" , e);                }            }            if(null != inputStreamReader){                try {                    inputStreamReader.close();                } catch (IOException e) {                    logger.error("Failed to close inputStreamReader" , e);                }            }            if(null != resourceAsStream){                try {                    resourceAsStream.close();                } catch (IOException e) {                    logger.error("Failed to close resourceAsStream" , e);                }            }        }    }}