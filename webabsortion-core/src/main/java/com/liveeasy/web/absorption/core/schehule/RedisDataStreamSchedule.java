package com.liveeasy.web.absorption.core.schehule;import com.liveeasy.web.absorption.core.plugin.DownloaderPlugin;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.data.redis.core.RedisTemplate;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import java.io.DataInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.net.URL;import java.util.Collection;import java.util.Iterator;import java.util.List;public class RedisDataStreamSchedule extends AbstractDataStreamSchedule implements DuplicateRemover<String>{    private static final String DOWNLOADER_PREFIX = "downloader_";    private static final String SET_DOWNLOADER_PREFIX = "set_downloader_";    private RedisTemplate<String , String> redisTemplate;    public RedisDataStreamSchedule(RedisTemplate redisTemplate){        super();        this.redisTemplate = redisTemplate;    }    public RedisTemplate getRedisTemplate(){        return this.redisTemplate;    }    @Override    protected String getDataStreamUrl() {            String dataStreamUrl = redisTemplate.opsForList().leftPop(getDownloaderKey());            if (null != dataStreamUrl && !isDuplicate(dataStreamUrl)) {                return dataStreamUrl;            }            return null;    }    @Override    public void addElement(String url) {        redisTemplate.opsForList().leftPush(getDownloaderKey() , url);    }    @Override    public void addElements(List<String> urls) {        if(null != urls){            redisTemplate.opsForList().leftPushAll(getDownloaderKey() , urls);        }    }    @Override    public boolean isDuplicate(String url) {            return redisTemplate.opsForSet().add(getSetDownloaderKey(), url) == 0;    }    @Override    public void resetDuplicateCheck() {        redisTemplate.delete(getSetDownloaderKey());    }    @Override    public void redoQueue(String element) {        redisTemplate.opsForSet().remove(getSetDownloaderKey() , element);        redisTemplate.opsForList().rightPush(getDownloaderKey() , element);    }    @Override    public void redoQueueAll(List<String> elements) {    }    public String getDownloaderKey(){        return DOWNLOADER_PREFIX + task.getUUID();    }    public String getSetDownloaderKey(){        return SET_DOWNLOADER_PREFIX + task.getUUID();    }}