package com.liveeasy.web.absorption.core.schehule;import com.liveeasy.web.absorption.core.plugin.DownloaderPlugin;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import java.io.DataInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.net.URL;import java.util.Collection;import java.util.Iterator;import java.util.List;public class RedisDataStreamSchedule extends AbstractDataStreamSchedule implements DuplicateRemover<String>{    private static final String DOWNLOADER_PREFIX = "downloader_";    private static final String SET_DOWNLOADER_PREFIX = "set_downloader_";    private JedisPool jedisPool;    public RedisDataStreamSchedule(JedisPool jedisPool){        super();        this.jedisPool = jedisPool;    }    public JedisPool getJedisPool(){        return this.jedisPool;    }    @Override    protected String getDataStreamUrl() {        Jedis jedis = jedisPool.getResource();        try {            String dataStreamUrl = jedis.lpop(getDownloaderKey());            if (null != dataStreamUrl && !isDuplicate(dataStreamUrl)) {                return dataStreamUrl;            }            return null;        }finally {            jedisPool.returnResource(jedis);        }    }    @Override    public void addElement(String url) {        if(null != url) {            Jedis jedis = jedisPool.getResource();            try{                jedis.lpush(getDownloaderKey() , url);            }finally {                jedisPool.returnResource(jedis);            }        }    }    @Override    public void addElements(List<String> urls) {        if(null != urls){            Jedis jedis = jedisPool.getResource();            try {                for (int i =0 , length = urls.size() ; i < length ; i++) {                        String url = urls.get(i);                        if (null != url) {                            jedis.lpush(getDownloaderKey(), url);                        }                }            }finally {                jedisPool.returnBrokenResource(jedis);            }        }    }    @Override    public boolean isDuplicate(String url) {        Jedis jedis = jedisPool.getResource();        try {            return jedis.sadd(getSetDownloaderKey(), url) == 0;        }finally {            jedisPool.returnResource(jedis);        }    }    @Override    public void resetDuplicateCheck() {        Jedis jedis = jedisPool.getResource();        try {            jedis.del(getSetDownloaderKey());        }finally {            jedisPool.returnResource(jedis);        }    }    @Override    public void redoQueue(String element) {        Jedis jedis = jedisPool.getResource();        try{            jedis.srem(getSetDownloaderKey() , element);            jedis.rpush(getDownloaderKey() , element);        }finally {            jedisPool.returnResource(jedis);        }    }    public String getDownloaderKey(){        return DOWNLOADER_PREFIX + task.getUUID();    }    public String getSetDownloaderKey(){        return SET_DOWNLOADER_PREFIX + task.getUUID();    }}