package com.liveeasy.web.absorption.core.schehule;import com.liveeasy.web.absorption.core.pipeline.DataStreamPipeline;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import java.io.DataInputStream;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.net.URL;import java.util.Collection;import java.util.Iterator;import java.util.List;public class RedisDataStreamSchedule extends AbstractDataStreamSchedule implements DuplicateRemover{    private Logger logger = LoggerFactory.getLogger(RedisDataStreamSchedule.class);    private static String DOWNLOADER_PREFIX = "downloader_";    private static String SET_DOWNLOADER_PREFIX = "set_downloader_";    private JedisPool jedisPool;    public RedisDataStreamSchedule(){        super();    };    public RedisDataStreamSchedule(JedisPool jedisPool){        this.jedisPool = jedisPool;    }    @Override    protected void execute() {        Jedis jedis = jedisPool.getResource();        try {            String dataStreamUrl = jedis.lpop(DOWNLOADER_PREFIX + dataStreamPipeline);            if (null != dataStreamUrl && !isDuplicate(dataStreamUrl, dataStreamPipeline.getSuffix())) {                DataInputStream dataInputStream = null;                FileOutputStream outputStream = null;                try {                    URL url = new URL(dataStreamUrl);                    dataInputStream = new DataInputStream(url.openStream());                    dataStreamPipeline.streamPipeline(dataInputStream);                } catch (Exception e) {                    logger.error("下载图片{}失败", dataStreamUrl, e);                    resetDuplicateCheck(dataStreamUrl, dataStreamPipeline.getSuffix());                    addDataStreamUrl(dataStreamPipeline.getSuffix(), dataStreamUrl);                } finally {                    if (null != dataInputStream) {                        try {                            dataInputStream.close();                        } catch (IOException e) {                            logger.error("关闭流失败", e);                        }                    }                }            }        }finally {            jedisPool.returnResource(jedis);        }    }    @Override    public void addDataStreamUrl(String suffix, String url) {        if(null != url) {            Jedis jedis = jedisPool.getResource();            try{                jedis.rpush(DOWNLOADER_PREFIX + suffix , url);            }finally {                jedisPool.returnResource(jedis);            }        }    }    @Override    public void addDataStreamUrl(String suffix, Collection<String> urls) {        if(null != urls){            Jedis jedis = jedisPool.getResource();            try {                for (Iterator<String> iterator = urls.iterator(); iterator.hasNext(); ) {                    String url = iterator.next();                    if (null != url) {                         jedis.lpush(DOWNLOADER_PREFIX + suffix, url);                    }                }            }finally {                jedisPool.returnBrokenResource(jedis);            }        }    }    @Override    public boolean isDuplicate(String url , String suffix) {        Jedis jedis = jedisPool.getResource();        try {            return jedis.sadd(SET_DOWNLOADER_PREFIX + suffix, url) == 0;        }finally {            jedisPool.returnResource(jedis);        }    }    @Override    public void resetDuplicateCheck(String url, String suffix) {        Jedis jedis = jedisPool.getResource();        try {            jedis.srem(SET_DOWNLOADER_PREFIX + suffix , url);        }finally {            jedisPool.returnResource(jedis);        }    }}