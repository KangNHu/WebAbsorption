package com.liveeasy.web.absorption.core.schehule;import com.liveeasy.web.absorption.core.pipeline.DataStreamPipeline;import java.util.UUID;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.ThreadFactory;import java.util.concurrent.atomic.AtomicBoolean;import java.util.concurrent.atomic.AtomicInteger;public abstract class AbstractDataStreamSchedule implements DataStreamSchedule {    /**     * 任务状态，运行：true 结束 ： false     * 默认当任务调度器执行任务后为运行状态z     * 给予手动关闭任务的方法     */    private AtomicBoolean status = new AtomicBoolean(false);    private ExecutorService executorService;    private int threadNum = 1;    protected DataStreamPipeline dataStreamPipeline;    public AbstractDataStreamSchedule(){        executorService = Executors.newFixedThreadPool(this.threadNum , new ThreadFactory() {            private AtomicInteger index = new AtomicInteger();            @Override            public Thread newThread(Runnable r) {                return new Thread(r , "data-schedule-" + index.incrementAndGet());            }        });    }    public void setExecutorService(ExecutorService executorService){        this.executorService = executorService;    }    @Override    public DataStreamPipeline getDataStreamPipeline(){        return this.dataStreamPipeline;    }    @Override    public void stop() {        status.set(false);        if(!executorService.isShutdown()){            executorService.shutdown();        }    }    @Override    public void start() {        status.set(true);        executorService.execute(new Runnable() {            @Override            public void run() {                while (status.get()) {                        execute();                }            }        });    }    @Override    public boolean isClose() {        return !status.get();    }    @Override    public void setDataStreamPipeline(DataStreamPipeline dataStreamPipeline){        this.dataStreamPipeline = dataStreamPipeline;    }    protected abstract void execute();}