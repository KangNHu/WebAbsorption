package com.liveeasy.web.absorption.core.factory;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;public  class WebAbsorptionComponentCloneBeanFactory implements CloneBeanFactory{    private static Logger logger = LoggerFactory.getLogger(WebAbsorptionComponentCloneBeanFactory.class);    private Map<Class , Product> prototypeMap = new ConcurrentHashMap<>();    private static  Object lock = new Object();    private static WebAbsorptionComponentCloneBeanFactory webAbsorptionComponentCloneBeanFactory;    private WebAbsorptionComponentCloneBeanFactory(){};    public static WebAbsorptionComponentCloneBeanFactory newInstance() {        if(null != webAbsorptionComponentCloneBeanFactory){            return webAbsorptionComponentCloneBeanFactory;        }        synchronized (lock){            if(null == webAbsorptionComponentCloneBeanFactory){                webAbsorptionComponentCloneBeanFactory = new WebAbsorptionComponentCloneBeanFactory();            }        }        return webAbsorptionComponentCloneBeanFactory;    }    @Override    public <T extends Product> T getClone(Class<T> target) {        Product resource = prototypeMap.get(target);        T clone = null;        try {            if(resource == null){                resource = target.newInstance();                prototypeMap.putIfAbsent(target , resource);            }            clone = (T) resource.createClone();        } catch (Exception e) {            logger.error("failed to  clone {}  instance" , target , e);        }        return clone;    }    @Override    public <T extends Product> T getClone(T target) {        if (target == null){            return null;        }        try {            return (T) target.createClone();        } catch (CloneNotSupportedException e) {            logger.error("clone failed");            return null;        }    }    @Override    public <T extends Product> List<T> getCloneList(List<T> target) {        List<T> list = new ArrayList<>();        for (Iterator<T> iterator = target.iterator() ; iterator.hasNext() ;){            T resource = iterator.next();            T clone = getClone(resource);            if(null != null){                list.add(clone);            }        }        return list;    }}